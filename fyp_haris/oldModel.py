from bson import ObjectId
import pymongo as pm


class User:
    def __init__(self, user_name, email, password, _id=None):
        self.user_name = user_name
        self.email = email
        self.password = password
        self.photo_link = None
        self.bio = None
        self.display_name = None
        self.no_of_likes = 0
        self.no_of_followers = 0
        self._id = _id if _id is not None else ObjectId()

    def to_dict(self):
        data = {
            "_id": self._id,
            "user_name": self.user_name,
            "email": self.email,
            "password": self.password,
            "photo_link": self.photo_link,
            "bio": self.bio,
            "display_name": self.display_name,
            "no_of_likes": self.no_of_likes,
            "no_of_followers": self.no_of_followers
        }
        return data

    def save_to_db(self, collection):
        # Insert the document into the MongoDB collection
        result = collection.insert_one(self.to_dict())
        # Update the _id attribute with the _id generated by MongoDB
        self._id = result.inserted_id
        return self._id

    @classmethod
    def load_from_db(cls, collection, _id):
        _id = ObjectId(_id)
        object = collection.find_one({"_id": _id})
        return object

    @classmethod
    def update_bio(cls, collection, _id, bio):
        _id = ObjectId(_id)
        return collection.update_one({"_id": _id}, {"$set": {"bio": bio}})

    @classmethod
    def update_photo_link(cls, collection, _id, link):
        _id = ObjectId(_id)
        return collection.update_one({"_id": _id}, {"$set": {"photo_link": link}})

    @classmethod
    def update_display_name(cls, collection, _id, display_name):
        _id = ObjectId(_id)
        return collection.update_one({"_id": _id}, {"$set": {"display_name": display_name}})

    @classmethod
    def update_no_of_likes(cls, collection, _id, inc_dec):
        _id = ObjectId(_id)
        return collection.update_one({"_id": _id}, {"$inc": {"no_of_likes": inc_dec}})

    @classmethod
    def update_no_of_followers(cls, collection, _id, inc_dec):
        _id = ObjectId(_id)
        return collection.update_one({"_id": _id}, {"$inc": {"no_of_followers": inc_dec}})


class Followers:
    def __init__(self, user_id, follower_id, _id=None):
        self.user_id = user_id
        self._id = _id if _id is not None else ObjectId()
        self.follower_id = follower_id

    def to_dict(self):
        return {
            "_id": self._id,
            "user_id": self.user_id,
            "follower_id": self.follower_id
        }

    def save_to_db(self, collection):
        result = collection.insert_one(self.to_dict())
        self._id = result.inserted_id

    @classmethod
    def load_from_db(cls, collection, _id):
        _id = ObjectId(_id)
        return collection.find_one({"_id": _id})

    @classmethod
    def get_following(cls, collection, follower_id):
        followings = collection.find({"follower_id": follower_id}, {"user_id": 1, "_id": 0})
        return list(followings)


class favorite:
    def __init__(self, user_id, recipe_id, _id=None):
        self._id = _id if _id is not None else ObjectId()
        self.recipe_id = recipe_id
        self.user_id = user_id

    def to_dict(self):
        data = {
            "_id": self._id,
            "user_id": self.user_id,
            "recipe_id": self.recipe_id
        }
        return data

    def save_to_db(self, collection):
        result = collection.insert_one(self.to_dict())
        self._id = result.inserted_id

    @classmethod
    def load_from_db(cls, collection, _id):
        _id = ObjectId(_id)
        return collection.find_one({"_id": _id})

    @classmethod
    def get_favorite_recipes(cls, collection, user_id):
        recipes = collection.find({"user_id": user_id}, {"recipe_id": 1, "_id": 0})
        return list(recipes)


class Ingredients:
    def __init__(self, ingredients_name, quantity, unit_of_quantity):
        # self._id = _id if _id is not None else ObjectId()
        # self.recipe_id = recipe_id
        self.ingredients_name = ingredients_name
        self.quantity = quantity
        self.unit_of_quantity = unit_of_quantity

    def to_dict(self):
        return {
            "ingredients_name": self.ingredients_name,
            "quantity": self.quantity,
            "unit_of_quantity": self.unit_of_quantity
        }

    # def save_to_db(self, collection):
    #     result = collection.insert_one(self.to_dict())
    #     self._id = result.inserted_id

    # @classmethod
    # def get_ingredients(cls, collection, recipe_id):
    #     ing = collection.find({"recipe_id": recipe_id}, {"recipe_id" : 0, "_id" : 0})
    #     return  list(ing)


class Tags:
    def __init__(self, tag_name, recipe_id, _id=None):
        self._id = _id if _id is not None else ObjectId()
        self.tag_name = tag_name.lower()
        self.recipe_id = recipe_id

    def to_dict(self):
        return {
            "_id": self._id,
            "tag_name": self.tag_name,
            "recipe_id": self.recipe_id
        }

    def save_to_db(self, collection):
        result = collection.insert_one(self.to_dict())
        self._id = result.inserted_id

    @classmethod
    def get_recipe_id(cls, collection, tag_name):
        rep = collection.find({"tag_name": tag_name.lower()}, {"recipe_id": 1, "_id": 0})
        return list(rep)


class Review:
    def __init__(self, recipe_id, user_id, rating, comment, recipe_author_id, _id=None):
        self._id = _id if _id is not None else ObjectId()
        self.recipe_id = recipe_id
        self.user_id = user_id
        self.rating = rating
        self.comment = comment
        self.recipe_author_id = recipe_author_id

    def to_dict(self):
        return {
            "_id": self._id,
            "recipe_id": self.recipe_id,
            "user_id": self.user_id,
            "rating": self.rating,
            "comment": self.comment,
            "recipe_author_id": self.recipe_author_id
        }

    def save_to_db(self, collection):
        result = collection.insert_one(self.to_dict())
        self._id = result.inserted_id

    @classmethod
    def get_reviews(cls, collection, recipe_id):
        rep = collection.find({"recipe_id": recipe_id}, {"recipe_id": 0, "_id": 0})
        return list(rep)

    @classmethod
    def get_ratings(cls, collection, recipe_id):
        rep = collection.find({"recipe_id": recipe_id}, {"rating": 1, "_id": 0})
        return list(rep)


class Recipe:
    def __init__(self, title, author_id, cuisine_type, meal_type, cooking_time, difficulty_level, procedure, image,
                 _id=None):
        self._id = _id if _id is not None else ObjectId()
        self.title = title
        self.author_id = author_id
        self.cuisine_type = cuisine_type
        self.meal_type = meal_type
        self.cooking_time = cooking_time
        self.difficulty_level = difficulty_level
        self.procedure = procedure
        self.image = image
        self.ingredients = []
        self.likes = 0
        self.average_rating = 0.0

    def to_dict(self):
        return {
            "_id": self._id,
            "title": self.title,
            "author_id": self.author_id,
            "cuisine_type": self.cuisine_type,
            "meal_type": self.meal_type,
            "cooking_time": self.cooking_time,
            "difficulty_level": self.difficulty_level,
            "procedure": self.procedure,
            "image": self.image,
            "ingredients": self.ingredients,
            "likes": self.likes,
            "average_rating": self.average_rating
        }

    def save_to_db(self, collection):
        result = collection.insert_one(self.to_dict())
        self._id = result.inserted_id

    def add_ingredients(self, ingredients_dictionary):
        self.ingredients = ingredients_dictionary

    @classmethod
    def update_likes(cls, collection, recipe_id, inc_dec):
        collection.update_one({"recipe_id": recipe_id}, {"$inc": {"likes": inc_dec}})

    @classmethod
    def update_avg_rating(cls, review_collection, collection, recipe_id):
        ratings = Review.get_ratings(review_collection, recipe_id)
        length = len(ratings)
        sum = 0
        for i in ratings:
            sum += i['rating']

        average_rating = float(sum / length)
        collection.update_one({"recipe_id": recipe_id}, {"$set": {"average_rating": average_rating}})
